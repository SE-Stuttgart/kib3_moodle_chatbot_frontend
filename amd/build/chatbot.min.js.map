{"version":3,"file":"chatbot.min.js","sources":["../src/chatbot.js"],"sourcesContent":["import Selectors from './local/selectors';\nimport DonutChart from './local/charts/donut/donut';\nimport LineChart from './local/charts/line/line';\nimport $ from 'jquery';\n\n\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        if(e.target.closest(Selectors.actions.sendMessage)) {\n            // get value of input field, then send\n            const textInputField = $(\"#block_chatbot-userUtterance\");\n            const user_input = textInputField.val();\n            sendMessage(user_input);\n        } else if(e.target.closest(Selectors.actions.toggleWindowState)) {\n            setWindowState(!(localStorage.getItem(\"chatbot.maximized\") === \"true\"));\n        } else if(e.target.closest(Selectors.actions.toggleWindowSize)) {\n            // toggle current size\n            const new_size = localStorage.getItem(\"chatbot.size\") === \"UI_SIZE_DEFAULT\"? \"UI_SIZE_LARGE\" : \"UI_SIZE_DEFAULT\";\n            resizeWindow(new_size);\n        } else if(e.target.closest(Selectors.actions.help)) {\n            sendMessage(\"Hilfe\");\n        } else if(e.target.closest(Selectors.actions.settings)) {\n            // TODO open settings modal\n        }\n    });\n    document.addEventListener('keydown', e => {\n        if (e.target.closest(Selectors.actions.textInput)) {\n            if(e.key === \"Enter\") {\n                // get value of input field, then send\n                const textInputField = $(\"#block_chatbot-userUtterance\");\n                const user_input = textInputField.val();\n                sendMessage(user_input);\n            }\n        }\n    });\n};\n\nconst sendMessage = (user_input) => {\n    console.log(\"SENDING\", user_input);\n    // forwad value of input field to socket & send message\n    conn.sendMessage(user_input);\n    // show user message in messagelist\n    addUserMessage(user_input);\n    // clear input field\n    const textInputField = $(\"#block_chatbot-userUtterance\");\n    textInputField.val(\"\");\n};\n\nconst extend_chat_history = (party, message) => {\n    // extend chat history in local storage, truncate after 10 items\n    const storage_history = localStorage.getItem(\"chatbot.history\");\n    var chat_history = storage_history===null? [] : JSON.parse(storage_history);\n\n    chat_history.push({party: party, message: message});\n    if(chat_history.length > 10) {\n        chat_history = chat_history.slice(1);\n        $('#block_chatbot-messagelist:first-child').remove();\n    }\n    localStorage.setItem(\"chatbot.history\", JSON.stringify(chat_history));\n};\n\nconst restore_chat_history = () => {\n    const storage_history = localStorage.getItem(\"chatbot.history\");\n    var chat_history = storage_history===null? [] : JSON.parse(storage_history);\n\n    chat_history.forEach(item => {\n        if(item.party === 'user') {\n            addUserMessage(item.message, false);\n        }\n        else if(item.party === 'system'){\n            addSystemMessage(item.message, false);\n        }\n    });\n};\n\nconst addUserMessage = (utterance, shouldScroll = true) => {\n    /*\n    Adds a new messagebox to the message list\n    Args:\n        utterance (String): the user utterance\n    */\n   // remove answer candidates\n    $(\".block_chatbot-answer_candidate_list\").remove();\n\n    // add user message\n    const messagelist = $('#block_chatbot-messagelist');\n    messagelist.append(`\n        <div class=\"block_chatbot-speech-bubble block_chatbot-user\">\n            <div class=\"block_chatbot-message\" style=\"color: anthrazit\">${utterance}</div>\n        </div>\n    `);\n\n    extend_chat_history('user', utterance);\n\n    // scroll to newest message\n    if(shouldScroll){\n        messagelist.animate({ scrollTop: messagelist.prop(\"scrollHeight\")}, 500);\n    } else {\n        messagelist.scrollTop(messagelist.prop(\"scrollHeight\"));\n    }\n};\n\nconst renderComponent = (utterance) => {\n    const messagelist = $('#block_chatbot-messagelist');\n    const messageBubble = document.createElement(\"div\");\n    messageBubble.className = \"block_chatbot-speech-bubble block_chatbot-system\";\n    const message = document.createElement(\"div\");\n    message.className = \"block_chatbot-message\";\n    message.style.color = \"anthrazit\";\n\n    const args = utterance.split(\";\");\n    const component_type = args[0].replace(\"$$\", \"\");\n    if(component_type === \"DONUT\") {\n        const outerTitle = args[1];\n        const outerValue = args[2];\n        const innerTitle = args.length > 3? args[3] : null;\n        const innerValue = args.length > 4? args[4] : null;\n        const plot = new DonutChart(outerValue, outerTitle, innerValue, innerTitle).render();\n        message.append(plot);\n        messageBubble.append(message);\n        messagelist.append(messageBubble);\n    } else if(component_type === \"LINECHART\") {\n        const legendTitle1 = args[1];\n        const values1 = JSON.parse(args[2]);\n        const legendTitle2 = args[3];\n        const values2 = JSON.parse(args[4]);\n        var plot = document.createElement(\"div\");\n        plot.className = \"block_chatbot-plotly-chart\";\n        console.log(\"TITLE\", legendTitle1, \",\", legendTitle2);\n        console.log(\"DATA1\", values1);\n        console.log(\"DATA2\", values2);\n        message.append(plot);\n        messageBubble.append(message);\n        messagelist.append(messageBubble);\n        new LineChart(plot, legendTitle1, values1, legendTitle2, values2).render(Plotly);\n    } else if(component_type === \"QUIZ\") {\n        const quiz_args = JSON.parse(args[1]);\n        console.log(\"QUIZ ARGS\", quiz_args);\n        messageBubble.style.width = `80%`;\n        message.style.width = `100%`;\n        var iframe = document.createElement(\"iframe\");\n        iframe.src = `${quiz_args.host}/h5p/embed.php?url=${quiz_args.host}/pluginfile.php/${quiz_args.context}` +\n                     `/mod_h5pactivity/${quiz_args.filearea}/${quiz_args.itemid}/${quiz_args.filename}` +\n                     `&preventredirect=1&component=mod_h5pactivity`;\n        iframe.className = \"h5p-player border-0 block_chatbot-quiz\";\n        message.append(iframe);\n        messageBubble.append(message);\n        messagelist.append(messageBubble);\n    }\n};\n\n\nconst createAnswerCandidateButton = (candidate) => {\n    var button = document.createElement(\"p\");\n    button.className = \"block_chatbot-answer_candidate\";\n    button.textContent = candidate;\n    button.onclick = () => sendMessage(candidate);\n    return button;\n};\n\nconst addSystemMessage = (utterance, shouldScroll = false) => {\n    /*\n    Adds a new messagebox to the message list\n    Args:\n        utterance (String): the system utterance\n    */\n    const messagelist = $('#block_chatbot-messagelist');\n    const content = utterance[0];\n    const answerCandidates = utterance[1];\n\n    extend_chat_history('system', utterance);\n    const scrollTop = messagelist.prop(\"scrollHeight\");\n\n    if(content.startsWith(\"$$\")) {\n        renderComponent(content);\n    } else {\n        var systemBubble = document.createElement(\"div\");\n        systemBubble.className = \"block_chatbot-speech-bubble block_chatbot-system\";\n        var systemMessage = document.createElement(\"div\");\n        systemMessage.innerHTML = content;\n        systemMessage.className = \"block_chatbot-message\";\n        systemMessage.style.color = \"anthrazit\";\n        systemBubble.append(systemMessage);\n        if(answerCandidates.length > 0) {\n            var answer_candidate_el = document.createElement(\"div\");\n            answer_candidate_el.className = \"block_chatbot-answer_candidate_list\";\n            answerCandidates.forEach(cand => answer_candidate_el.append(createAnswerCandidateButton(cand)));\n            systemBubble.append(answer_candidate_el);\n        }\n        messagelist.append(systemBubble);\n    }\n\n    // scroll to newest message\n    if(shouldScroll) {\n        // messagelist.animate({ scrollTop: messagelist.prop(\"scrollHeight\")}, 500);\n    } else {\n        messagelist.scrollTop(scrollTop);\n    }\n};\n\nconst setWindowState = (maximized) => {\n    console.log(\"Window state\", maximized);\n\n    if(maximized) {\n        $(\"#block_chatbot-messagelist\").removeClass('block_chatbot-hidden');\n        $(\".block_chatbot-inputContainer\").removeClass('block_chatbot-hidden');\n        $(\".block_chatbot-chatwindowInner\").removeClass('block_chatbot-hidden');\n        $(\".block_chatbot-headerMinimized\").addClass('block_chatbot-hidden');\n    } else {\n        $(\"#block_chatbot-messagelist\").addClass('block_chatbot-hidden');\n        $(\".block_chatbot-inputContainer\").addClass('block_chatbot-hidden');\n        $(\".block_chatbot-chatwindowInner\").addClass('block_chatbot-hidden');\n        $(\".block_chatbot-headerMinimized\").removeClass('block_chatbot-hidden');\n    }\n    // remember state\n    localStorage.setItem(\"chatbot.maximized\", maximized? \"true\" : \"false\");\n};\n\nconst resizeWindow = (size) => {\n    console.log(\"Resize to\", size);\n\n    if(size == \"UI_SIZE_DEFAULT\") {\n        $(\".block_chatbot-chatwindowInner\").removeClass('block_chatbot-big');\n        $(\".block_chatbot-chatwindowInner\").addClass('block_chatbot-default');\n    } else if(size == \"UI_SIZE_LARGE\") {\n        $(\".block_chatbot-chatwindowInner\").removeClass('block_chatbot-default');\n        $(\".block_chatbot-chatwindowInner\").addClass('block_chatbot-big');\n    }\n\n    localStorage.setItem(\"chatbot.size\", size);\n};\n\nclass ChatbotConnection {\n    constructor(server_name, server_port, userid, courseid, slidefindertoken, wsuserid, timestamp) {\n        this.server_name = server_name;\n        this.server_port = server_port;\n        this.userid = userid;\n        this.courseid = courseid;\n        this.slidefindertoken = slidefindertoken;\n        this.wsuserid = wsuserid;\n        this.timestamp = timestamp;\n        this.conn = null;\n    }\n\n    openConnection = () => {\n        console.log(`Connecting to: ws://${this.server_name}:${this.server_port}/ws?token=${this.userid}`);\n        this.conn = new WebSocket(`ws://${this.server_name}:${this.server_port}/ws?token=${this.userid}`);\n\n        this.conn.onopen = () => {\n            // Update Status to Online\n            console.log('connected', this.userid);\n\n            const start_dialog_msg = {\n                access_token: this.userid,\n                domain: 0,\n                topic: 'start_dialog',\n                courseid: this.courseid,\n                slidefindertoken: this.slidefindertoken,\n                wsuserid: this.wsuserid,\n                timestamp: this.timestamp\n            };\n\n            console.log(\"START MSG\", start_dialog_msg);\n            this.conn.send(JSON.stringify(start_dialog_msg));\n        };\n        this.conn.onmessage = (msg) => {\n            // Parse received data\n            const data = JSON.parse(msg.data);\n            console.log(\"Received data\", data);\n            // render each message\n            data.forEach(message => {\n                if(message.party === \"system\") {\n                    addSystemMessage(message.content);\n                } else if(message.party === \"control\") {\n                    if(message.content === \"UI_OPEN\") {\n                        setWindowState(true);\n                    } else if(message.content.startsWith(\"UI_SIZE\")) {\n                        resizeWindow(message.content);\n                    }\n                }\n                else {\n                    addUserMessage(message.content);\n                }\n            });\n        };\n        this.conn.onclose = () => {\n            this.conn.close();\n            setTimeout(this.openConnection, 2500);\n        };\n    };\n\n    sendMessage = (message) => {\n        const msg = {\n            userid: this.userid,\n            domain: 0,\n            topic: 'user_utterance',\n            courseid: this.courseid,\n            msg: message\n        };\n        console.log(\"Sending message\", msg);\n        this.conn.send(JSON.stringify(msg));\n    };\n}\n\nconst isInsideIFrame = () => {\n    if (window.location !== window.parent.location)\n    {\n        // inside iframe\n        return true;\n    }\n    else {\n        // The page is not in an iFrame\n        return false;\n    }\n};\n\nvar conn;\nvar Plotly;\n\nexport const init = (server_name, server_port, server_url, userid, username, courseid, slidefindertoken,\n                     wsuserid, timestamp, plotly) => {\n    if(isInsideIFrame()) {\n        console.log(\"IFrame detected - Chatbot won't be loaded\");\n        return;\n    }\n    console.log(\"SERVER\", server_name);\n    console.log(\"PORT\", server_port);\n    console.log(\"URL\", server_url);\n    console.log(\"USER\", userid, username);\n    console.log(\"COURSE\", courseid);\n    console.log(\"SLIDEFINDER TOKEN\", slidefindertoken);\n    console.log(\"WSUERID\", wsuserid);\n    console.log(\"TIMESTAMP\", timestamp);\n\n    Plotly = plotly;\n    registerEventListeners();\n    conn = new ChatbotConnection(server_name, server_port, userid, courseid, slidefindertoken, wsuserid, timestamp);\n    conn.openConnection();\n\n    // Move container into document root\n    const chatwindow = $(\"#block_chatbot-chatwindow\");\n    chatwindow.detach();\n    $(document.body).append(chatwindow);\n\n    // Restore chat history\n    restore_chat_history();\n\n    // Set or restore minimized state\n    if (localStorage.getItem(\"chatbot.maximized\") === null) {\n        localStorage.setItem(\"chatbot.maximized\", \"false\");\n    }\n    setWindowState(localStorage.getItem(\"chatbot.maximized\") === \"true\");\n    // Set or restore chatbot size\n    if (localStorage.getItem(\"chatbot.size\") === null) {\n        localStorage.setItem(\"chatbot.size\", \"UI_SIZE_DEFAULT\");\n    }\n    resizeWindow(localStorage.getItem(\"chatbot.size\"));\n\n    // Minimize chatbot when clicking outside\n    document.addEventListener('click', function(event) {\n        var chatbot = document.getElementById('block_chatbot-chatwindow');\n        // Check if the clicked element is outside the \"chatbot\" div\n        if (event.target !== chatbot && !chatbot.contains(event.target)) {\n            console.log(event.target);\n            // Check if the clicked element is not inside the \"chatbot\" div\n            setWindowState(false);\n        }\n    });\n\n    return conn;\n};\n"],"names":["sendMessage","user_input","console","log","conn","addUserMessage","val","extend_chat_history","party","message","storage_history","localStorage","getItem","chat_history","JSON","parse","push","length","slice","remove","setItem","stringify","utterance","shouldScroll","messagelist","append","animate","scrollTop","prop","renderComponent","messageBubble","document","createElement","className","style","color","args","split","component_type","replace","outerTitle","outerValue","innerTitle","innerValue","plot","DonutChart","render","legendTitle1","values1","legendTitle2","values2","LineChart","Plotly","quiz_args","width","iframe","src","host","context","filearea","itemid","filename","createAnswerCandidateButton","candidate","button","textContent","onclick","addSystemMessage","content","answerCandidates","startsWith","systemBubble","systemMessage","innerHTML","answer_candidate_el","forEach","cand","setWindowState","maximized","removeClass","addClass","resizeWindow","size","ChatbotConnection","constructor","server_name","server_port","userid","courseid","slidefindertoken","wsuserid","timestamp","this","WebSocket","onopen","start_dialog_msg","access_token","domain","topic","send","onmessage","msg","data","onclose","close","setTimeout","openConnection","server_url","username","plotly","window","location","parent","addEventListener","e","target","closest","Selectors","actions","toggleWindowState","toggleWindowSize","new_size","help","settings","textInput","key","chatwindow","detach","body","item","restore_chat_history","event","chatbot","getElementById","contains"],"mappings":"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"}