{"version":3,"file":"chatbot.min.js","sources":["../src/chatbot.js"],"sourcesContent":["import Selectors from './local/selectors';\nimport DonutChart from './local/charts/donut/donut';\nimport LineChart from './local/charts/line/line';\nimport {fetchUserSetttings, saveUserSetttings, assignUserSettings, readUserSettings} from './local/settings';\nimport $ from 'jquery';\n\n\nvar conn;\nvar Plotly;\n\n\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        if(e.target.closest(Selectors.actions.sendMessage)) {\n            // get value of input field, then send\n            const textInputField = $(\"#block_chatbot-userUtterance\");\n            const user_input = textInputField.val();\n            sendMessage(user_input);\n        } else if(e.target.closest(Selectors.actions.answerCandidate)) {\n            const msg = e.target.textContent;\n            sendMessage(msg);\n        } else if(e.target.closest(Selectors.actions.toggleWindowState)) {\n            setWindowState(!(localStorage.getItem(\"chatbot.maximized\") === \"true\"));\n        } else if(e.target.closest(Selectors.actions.toggleWindowSize)) {\n            // toggle current size\n            const new_size = localStorage.getItem(\"chatbot.size\") === \"UI_SIZE_DEFAULT\"? \"UI_SIZE_LARGE\" : \"UI_SIZE_DEFAULT\";\n            resizeWindow(new_size);\n        } else if(e.target.closest(Selectors.actions.help)) {\n            sendMessage(\"Hilfe\");\n        } else if(e.target.closest(Selectors.actions.settings)) {\n            // minimize chatbot\n            setWindowState(false);\n            // open settings modal\n            openSettingsModal();\n        } else if(e.target.closest(Selectors.actions.saveSettings)) {\n            e.preventDefault();\n            // convert form output to correct format for sending to DB\n            const settings = readUserSettings();\n            saveUserSetttings(conn.userid, conn.booksearchtoken, conn.wwwroot, settings).then(result => {\n                // we need to reload the page, because changing the \"enabled\" state requires reloading the template\n                window.location = self.location;\n                location.reload(true);\n            });\n        } else if(e.target.closest(Selectors.actions.agreeConsent)) {\n            sendConsent(conn.userid, conn.booksearchtoken, conn.wwwroot, true);\n        } else if(e.target.closest(Selectors.actions.rejectConsent)) {\n            sendConsent(conn.userid, conn.booksearchtoken, conn.wwwroot, false);\n        }\n    });\n    document.addEventListener('keydown', e => {\n        if (e.target.closest(Selectors.actions.textInput)) {\n            if(e.key === \"Enter\") {\n                // get value of input field, then send\n                const textInputField = $(\"#block_chatbot-userUtterance\");\n                const user_input = textInputField.val();\n                sendMessage(user_input);\n            }\n        }\n    });\n};\n\nconst openSettingsModal = () => {\n    // minimize chatbot to not be in the way of the settings dialog\n    setWindowState(false);\n    fetchUserSetttings(conn.userid, conn.booksearchtoken, conn.wwwroot).then(settings => {\n        // apply user settings to dialog modal\n        assignUserSettings(settings);\n    });\n};\n\nconst sendMessage = (user_input) => {\n    // console.log(\"SENDING\", user_input);\n    // forwad value of input field to socket & send message\n    conn.sendMessage(user_input);\n    // show user message in messagelist\n    addUserMessage(user_input);\n    // clear input field\n    const textInputField = $(\"#block_chatbot-userUtterance\");\n    textInputField.val(\"\");\n};\n\nconst extend_chat_history = (party, message) => {\n    // extend chat history in local storage, truncate after 10 items\n    const storage_history = localStorage.getItem(\"chatbot.history\");\n    var chat_history = storage_history===null? [] : JSON.parse(storage_history);\n\n    chat_history.push({party: party, message: message});\n    if(chat_history.length > 10) {\n        chat_history = chat_history.slice(1);\n        $('#block_chatbot-messagelist:first-child').remove();\n    }\n    localStorage.setItem(\"chatbot.history\", JSON.stringify(chat_history));\n};\n\nconst restore_chat_history = () => {\n    const storage_history = localStorage.getItem(\"chatbot.history\");\n    var chat_history = storage_history===null? [] : JSON.parse(storage_history);\n\n    chat_history.forEach(item => {\n        if(item.party === 'user') {\n            addUserMessage(item.message, false);\n        }\n        else if(item.party === 'system'){\n            addSystemMessage(item.message, false);\n        }\n    });\n};\n\nconst addUserMessage = (utterance, shouldScroll = true) => {\n    /*\n    Adds a new messagebox to the message list\n    Args:\n        utterance (String): the user utterance\n    */\n   // remove answer candidates\n    $(\".block_chatbot-answer_candidate_list\").remove();\n\n    // add user message\n    const messagelist = $('#block_chatbot-messagelist');\n    messagelist.append(`\n        <div class=\"block_chatbot-speech-bubble block_chatbot-user\">\n            <div class=\"block_chatbot-message\" style=\"color: anthrazit\">${utterance}</div>\n        </div>\n    `);\n\n    extend_chat_history('user', utterance);\n\n    // scroll to newest message\n    if(shouldScroll){\n        messagelist.animate({ scrollTop: messagelist.prop(\"scrollHeight\")}, 500);\n    } else {\n        messagelist.scrollTop(messagelist.prop(\"scrollHeight\"));\n    }\n};\n\nconst renderComponent = (utterance) => {\n    const messagelist = $('#block_chatbot-messagelist');\n    const messageBubble = document.createElement(\"div\");\n    messageBubble.className = \"block_chatbot-speech-bubble block_chatbot-system\";\n    const message = document.createElement(\"div\");\n    message.className = \"block_chatbot-message\";\n    message.style.color = \"anthrazit\";\n\n    const args = utterance.split(\";\");\n    const component_type = args[0].replace(\"$$\", \"\");\n    if(component_type === \"DONUT\") {\n        const outerTitle = args[1];\n        const outerValue = args[2];\n        const innerTitle = args.length > 3? args[3] : null;\n        const innerValue = args.length > 4? args[4] : null;\n        const plot = new DonutChart(outerValue, outerTitle, innerValue, innerTitle).render();\n        message.append(plot);\n        messageBubble.append(message);\n        messagelist.append(messageBubble);\n    } else if(component_type === \"LINECHART\") {\n        const legendTitle1 = args[1];\n        const values1 = JSON.parse(args[2]);\n        const legendTitle2 = args[3];\n        const values2 = JSON.parse(args[4]);\n        var plot = document.createElement(\"div\");\n        plot.className = \"block_chatbot-plotly-chart\";\n        // console.log(\"TITLE\", legendTitle1, \",\", legendTitle2);\n        // console.log(\"DATA1\", values1);\n        // console.log(\"DATA2\", values2);\n        message.append(plot);\n        messageBubble.append(message);\n        messagelist.append(messageBubble);\n        new LineChart(plot, legendTitle1, values1, legendTitle2, values2).render(Plotly);\n    } else if(component_type === \"QUIZ\") {\n        const quiz_args = JSON.parse(args[1]);\n        // console.log(\"QUIZ ARGS\", quiz_args);\n        messageBubble.style.width = `80%`;\n        message.style.width = `100%`;\n        var iframe = document.createElement(\"iframe\");\n        iframe.src = `${quiz_args.host}/h5p/embed.php?url=${quiz_args.host}/pluginfile.php/${quiz_args.context}` +\n                     `/mod_h5pactivity/${quiz_args.filearea}/${quiz_args.itemid}/${quiz_args.filename}` +\n                     `&preventredirect=1&component=mod_h5pactivity`;\n        iframe.className = \"h5p-player border-0 block_chatbot-quiz\";\n        message.append(iframe);\n        messageBubble.append(message);\n        messagelist.append(messageBubble);\n    }\n};\n\n\nconst createAnswerCandidateButton = (candidate) => {\n    var button = document.createElement(\"p\");\n    button.className = \"block_chatbot-answer_candidate\";\n    button.textContent = candidate;\n    button.setAttribute(\"data-action\", \"block_chatbot/answerCandidate\");\n    return button;\n};\n\nconst addSystemMessage = (utterance, shouldScroll = false) => {\n    /*\n    Adds a new messagebox to the message list\n    Args:\n        utterance (String): the system utterance\n    */\n    const messagelist = $('#block_chatbot-messagelist');\n    const content = utterance[0];\n    const answerCandidates = utterance[1];\n\n    extend_chat_history('system', utterance);\n    const scrollTop = messagelist.prop(\"scrollHeight\");\n\n    if(content.startsWith(\"$$\")) {\n        renderComponent(content);\n    } else {\n        var systemBubble = document.createElement(\"div\");\n        systemBubble.className = \"block_chatbot-speech-bubble block_chatbot-system\";\n        var systemMessage = document.createElement(\"div\");\n        systemMessage.innerHTML = content;\n        systemMessage.className = \"block_chatbot-message\";\n        systemMessage.style.color = \"anthrazit\";\n        systemBubble.append(systemMessage);\n        if(answerCandidates.length > 0) {\n            var answer_candidate_el = document.createElement(\"div\");\n            answer_candidate_el.className = \"block_chatbot-answer_candidate_list\";\n            answerCandidates.forEach(cand => answer_candidate_el.append(createAnswerCandidateButton(cand)));\n            systemBubble.append(answer_candidate_el);\n        }\n        messagelist.append(systemBubble);\n    }\n\n    // scroll to newest message\n    if(shouldScroll) {\n        // messagelist.animate({ scrollTop: messagelist.prop(\"scrollHeight\")}, 500);\n    } else {\n        messagelist.scrollTop(scrollTop);\n    }\n};\n\nconst setWindowState = (maximized) => {\n    // console.log(\"Window state\", maximized);\n\n    if(maximized) {\n        $(\"#block_chatbot-messagelist\").removeClass('block_chatbot-hidden');\n        $(\".block_chatbot-inputContainer\").removeClass('block_chatbot-hidden');\n        $(\".block_chatbot-chatwindowInner\").removeClass('block_chatbot-hidden');\n        $(\".block_chatbot-headerMinimized\").addClass('block_chatbot-hidden');\n    } else {\n        $(\"#block_chatbot-messagelist\").addClass('block_chatbot-hidden');\n        $(\".block_chatbot-inputContainer\").addClass('block_chatbot-hidden');\n        $(\".block_chatbot-chatwindowInner\").addClass('block_chatbot-hidden');\n        $(\".block_chatbot-headerMinimized\").removeClass('block_chatbot-hidden');\n    }\n    // remember state\n    localStorage.setItem(\"chatbot.maximized\", maximized? \"true\" : \"false\");\n};\n\nconst resizeWindow = (size) => {\n    // console.log(\"Resize to\", size);\n\n    if(size == \"UI_SIZE_DEFAULT\") {\n        $(\".block_chatbot-chatwindowInner\").removeClass('block_chatbot-big');\n        $(\".block_chatbot-chatwindowInner\").addClass('block_chatbot-default');\n    } else if(size == \"UI_SIZE_LARGE\") {\n        $(\".block_chatbot-chatwindowInner\").removeClass('block_chatbot-default');\n        $(\".block_chatbot-chatwindowInner\").addClass('block_chatbot-big');\n    }\n\n    localStorage.setItem(\"chatbot.size\", size);\n};\n\nclass ChatbotConnection {\n    constructor(server_name, server_port, wwwroot, userid, courseid, booksearchtoken, wsuserid, timestamp) {\n        this.server_name = server_name;\n        this.server_port = server_port;\n        this.wwwroot = wwwroot;\n        this.protocol = wwwroot.startsWith(\"https://\")? \"wss\" : \"ws\";\n        this.userid = userid;\n        this.courseid = courseid;\n        this.booksearchtoken = booksearchtoken;\n        this.wsuserid = wsuserid;\n        this.timestamp = timestamp;\n        this.conn = null;\n    }\n\n    openConnection = () => {\n        // console.log(`Connecting to: ws://${this.server_name}:${this.server_port}/ws?token=${this.userid}`);\n        this.conn = new WebSocket(`${this.protocol}://${this.server_name}:${this.server_port}/ws?token=${this.userid}`);\n\n        this.conn.onopen = () => {\n            // Update Status to Online\n            console.log('connected', this.userid);\n\n            const start_dialog_msg = {\n                access_token: this.userid,\n                domain: 0,\n                topic: 'start_dialog',\n                courseid: this.courseid,\n                booksearchtoken: this.booksearchtoken,\n                wsuserid: this.wsuserid,\n                timestamp: this.timestamp\n            };\n\n            // console.log(\"START MSG\", start_dialog_msg);\n            this.conn.send(JSON.stringify(start_dialog_msg));\n        };\n        this.conn.onmessage = (msg) => {\n            // Parse received data\n            const data = JSON.parse(msg.data);\n            // console.log(\"Received data\", data);\n            // render each message\n            data.forEach(message => {\n                if(message.party === \"system\") {\n                    addSystemMessage(message.content);\n                } else if(message.party === \"control\") {\n                    if(message.content === \"UI_OPEN\") {\n                        setWindowState(true);\n                    } else if(message.content.startsWith(\"UI_SIZE\")) {\n                        resizeWindow(message.content);\n                    } else if(message.content.startsWith(\"UI_SETTINGS\")) {\n                        openSettingsModal();\n                        // show modal\n                        $('#block_chatbot_settingsModal').modal('show');\n                    }\n                }\n                else {\n                    addUserMessage(message.content);\n                }\n            });\n        };\n        this.conn.onclose = () => {\n            this.conn.close();\n            setTimeout(this.openConnection, 2500);\n        };\n    };\n\n    sendMessage = (message) => {\n        const msg = {\n            userid: this.userid,\n            domain: 0,\n            topic: 'user_utterance',\n            courseid: this.courseid,\n            msg: message\n        };\n        // console.log(\"Sending message\", msg);\n        this.conn.send(JSON.stringify(msg));\n    };\n}\n\nconst isInsideIFrame = () => {\n    if (window.location !== window.parent.location)\n    {\n        // inside iframe\n        return true;\n    }\n    else {\n        // The page is not in an iFrame\n        return false;\n    }\n};\n\n\nconst sendConsent = async (userid, wstoken, wwwroot, consent) => {\n    // fetch initial settings\n    var settings = await fetchUserSetttings(userid, wstoken, wwwroot);\n    // Add consent and firstturn signal\n    settings.logging = consent;\n    delete settings.preferedcontenttypeid;\n\n    const msgContent = await saveUserSetttings(userid, wstoken, wwwroot, settings);\n\n    // we need to reload the page, because changing the \"consent\" state requires reloading the template\n    window.location = self.location;\n    location.reload(true);\n\n    return true;\n};\n\nexport const init = (enabled, firstturn, server_name, server_port, wwwroot, userid, username, courseid, booksearchtoken,\n                     wsuserid, timestamp, plotly) => {\n    if(isInsideIFrame()) {\n        console.log(\"IFrame detected - Chatbot won't be loaded\");\n        return;\n    }\n    // console.log(\"ENABLED\", enabled);\n    // console.log(\"FIRSTTURN\", firstturn);\n    // console.log(\"SERVER\", server_name);\n    // console.log(\"PORT\", server_port);\n    // console.log(\"WWWROOT\", wwwroot);\n    // console.log(\"USER\", userid, username);\n    // console.log(\"COURSE\", courseid);\n    // console.log(\"BOOKSEARCH TOKEN\", booksearchtoken);\n    // console.log(\"WSUERID\", wsuserid);\n    // console.log(\"TIMESTAMP\", timestamp);\n\n    // Move settings modal into document root\n    const settingsModal = $(\"#block_chatbot_settingsModal\");\n    settingsModal.detach();\n    $(document.body).append(settingsModal);\n\n    // Move resource modal into document root\n    const resourceModal = $(\"#block_chatbot_coursemoduleview\");\n    resourceModal.detach();\n    $(document.body).append(resourceModal);\n\n    Plotly = plotly;\n    registerEventListeners();\n    conn = new ChatbotConnection(server_name, server_port, wwwroot, userid, courseid, booksearchtoken, wsuserid, timestamp);\n    if(enabled) {\n\n        // Move container into document root\n        const chatwindow = $(\"#block_chatbot-chatwindow\");\n        chatwindow.detach();\n        $(document.body).append(chatwindow);\n\n        // Set or restore minimized state\n        // if (localStorage.getItem(\"chatbot.maximized\") === null) {\n        //     localStorage.setItem(\"chatbot.maximized\", \"false\");\n        // }\n        // Current preference is to keep chatbot minimized when switching pages, only opening for\n        // a) first turn\n        // b) badge events\n        // c) quiz events\n        // setWindowState(localStorage.getItem(\"chatbot.maximized\") === \"true\");\n        setWindowState(false);\n\n        // Set or restore chatbot size\n        if (localStorage.getItem(\"chatbot.size\") === null) {\n            localStorage.setItem(\"chatbot.size\", \"UI_SIZE_DEFAULT\");\n        }\n        resizeWindow(localStorage.getItem(\"chatbot.size\"));\n\n        if(firstturn === \"1\") {\n            // Show consent on first turn\n            setWindowState(true);\n        } else {\n            // Minimize chatbot when course module modal\n            $(\"#block_chatbot_coursemoduleview\").on('show.bs.modal', function () {\n                setWindowState(false);\n            });\n\n            // Restore chat history\n            restore_chat_history();\n\n            // Connect\n            conn.openConnection();\n        }\n\n        // Minimize chatbot when clicking outside\n        document.addEventListener('click', function(event) {\n            var chatbot = document.getElementById('block_chatbot-chatwindow');\n            // Check if the clicked element is outside the \"chatbot\" div\n            if ((event.target !== chatbot && !chatbot.contains(event.target)) &&\n                !event.target.className.includes('block_chatbot')) {\n                // Check if the clicked element is not inside the \"chatbot\" div\n                setWindowState(false);\n            } else {\n                // Element is inside the chatbot\n                if(event.target.className === 'block-chatbot-content-link') {\n                    // Get the data from the clicked button\n                    // Set the data in the modal body (iframe source and modal title)\n                    $('#block_chatbot_coursemoduleview_title').text(event.target.dataset.displaytext);\n                    $('#block_chatbot_coursemoduleview_iframe').prop(\"src\", event.target.dataset.src);\n                }\n            }\n        });\n\n    }\n    return conn;\n};\n"],"names":["conn","Plotly","openSettingsModal","setWindowState","userid","booksearchtoken","wwwroot","then","settings","sendMessage","user_input","addUserMessage","val","extend_chat_history","party","message","storage_history","localStorage","getItem","chat_history","JSON","parse","push","length","slice","remove","setItem","stringify","utterance","shouldScroll","messagelist","append","animate","scrollTop","prop","renderComponent","messageBubble","document","createElement","className","style","color","args","split","component_type","replace","outerTitle","outerValue","innerTitle","innerValue","plot","DonutChart","render","legendTitle1","values1","legendTitle2","values2","LineChart","quiz_args","width","iframe","src","host","context","filearea","itemid","filename","createAnswerCandidateButton","candidate","button","textContent","setAttribute","addSystemMessage","content","answerCandidates","startsWith","systemBubble","systemMessage","innerHTML","answer_candidate_el","forEach","cand","maximized","removeClass","addClass","resizeWindow","size","ChatbotConnection","constructor","server_name","server_port","courseid","wsuserid","timestamp","WebSocket","this","protocol","onopen","console","log","start_dialog_msg","access_token","domain","topic","send","onmessage","msg","data","modal","onclose","close","setTimeout","openConnection","sendConsent","async","wstoken","consent","logging","preferedcontenttypeid","window","location","self","reload","enabled","firstturn","username","plotly","parent","settingsModal","detach","body","resourceModal","addEventListener","e","target","closest","Selectors","actions","answerCandidate","toggleWindowState","toggleWindowSize","new_size","help","saveSettings","preventDefault","result","agreeConsent","rejectConsent","textInput","key","chatwindow","on","item","restore_chat_history","event","chatbot","getElementById","contains","includes","text","dataset","displaytext"],"mappings":"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"}