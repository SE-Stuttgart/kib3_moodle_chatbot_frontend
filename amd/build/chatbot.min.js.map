{"version":3,"file":"chatbot.min.js","sources":["../src/chatbot.js"],"sourcesContent":["import Selectors from './local/selectors';\nimport DonutChart from './local/charts/donut/donut';\nimport $ from 'jquery';\n\n\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.maximiseChatWindow)) {\n            window.alert(\"MAXIMISE\");\n        } else if(e.target.closest(Selectors.actions.minimizeChatWindow)) {\n            window.alert(\"MINIMIZE\");\n        } else if(e.target.closest(Selectors.actions.sendMessage)) {\n            sendMessage();\n        } else if(e.target.closest(Selectors.actions.toggleWindowState)) {\n            setWindowState(!(localStorage.getItem(\"chatbot.maximized\") === \"true\"));\n        }\n    });\n    document.addEventListener('keydown', e => {\n        if (e.target.closest(Selectors.actions.textInput)) {\n            if(e.key === \"Enter\") {\n              sendMessage();\n            }\n        }\n    });\n};\n\nconst sendMessage = () => {\n    const textInputField = $(\"#block_chatbot-userUtterance\");\n    // get value of input field\n    const user_input = textInputField.val();\n    // forwad value of input field to socket & send message\n    conn.sendMessage(user_input);\n    // show user message in messagelist\n    addUserMessage(user_input);\n    // clear input field\n    textInputField.val(\"\");\n};\n\nconst addUserMessage = (utterance) => {\n    /*\n    Adds a new messagebox to the message list\n    Args:\n        utterance (String): the user utterance\n    */\n    const messagelist = $('#block_chatbot-messagelist');\n    messagelist.append(`\n        <div class=\"block_chatbot-speech-bubble block_chatbot-user\">\n            <div class=\"block_chatbot-message\" style=\"color: anthrazit\">${utterance}</div>\n        </div>\n    `);\n    // scroll to newest message\n    messagelist.animate({ scrollTop: messagelist.prop(\"scrollHeight\")}, 500);\n};\n\nconst renderChart = (utterance) => {\n    if(utterance.startsWith(\"$DONUT\")) {\n        const args = utterance.split(\",\");\n        const outerValue = args[1];\n        const innerValue = args[2];\n        return new DonutChart(outerValue, \"Kurs\", innerValue, \"Wiederholte Quizze\").render();\n    }\n};\n\nconst addSystemMessage = (utterance) => {\n    /*\n    Adds a new messagebox to the message list\n    Args:\n        utterance (String): the system utterance\n    */\n    const messagelist = $('#block_chatbot-messagelist');\n    if(utterance.startsWith(\"$DONUT\")) {\n        const messageBubble = document.createElement(\"div\");\n        messageBubble.className = \"block_chatbot-speech-bubble block_chatbot-system\";\n        const message = document.createElement(\"div\");\n        message.className = \"block_chatbot-message\";\n        message.style.color = \"anthrazit\";\n        message.append(renderChart(utterance));\n        messageBubble.append(message);\n        messagelist.append(messageBubble);\n    } else {\n        messagelist.append(`\n            <div class=\"block_chatbot-speech-bubble block_chatbot-system\">\n                <div class=\"block_chatbot-message\" style=\"color: anthrazit\">${utterance}</div>\n            </div>`\n        );\n    }\n\n    // scroll to newest message\n    messagelist.animate({ scrollTop: messagelist.prop(\"scrollHeight\")}, 500);\n};\n\nconst setWindowState = (maximized) => {\n    console.log(\"Window state\", maximized);\n\n    if(maximized) {\n        $(\"#block_chatbot-messagelist\").removeClass('block_chatbot-hidden');\n        $(\".block_chatbot-inputContainer\").removeClass('block_chatbot-hidden');\n        $(\".block_chatbot-chatwindowInner\").removeClass('block_chatbot-hidden');\n        $(\".block_chatbot-headerMinimized\").addClass('block_chatbot-hidden');\n    } else {\n        $(\"#block_chatbot-messagelist\").addClass('block_chatbot-hidden');\n        $(\".block_chatbot-inputContainer\").addClass('block_chatbot-hidden');\n        $(\".block_chatbot-chatwindowInner\").addClass('block_chatbot-hidden');\n        $(\".block_chatbot-headerMinimized\").removeClass('block_chatbot-hidden');\n    }\n    // remember state\n    localStorage.setItem(\"chatbot.maximized\", maximized? \"true\" : \"false\");\n};\n\nclass ChatbotConnection {\n    constructor(server_name, server_port, userid, courseid, slidefindertoken) {\n        this.server_name = server_name;\n        this.server_port = server_port;\n        this.userid = userid;\n        this.courseid = courseid;\n        this.slidefindertoken = slidefindertoken;\n        this.conn = null;\n    }\n\n    openConnection = () => {\n        console.log(`Connecting to: ws://${this.server_name}:${this.server_port}/ws?token=${this.userid}`);\n        this.conn = new WebSocket(`ws://${this.server_name}:${this.server_port}/ws?token=${this.userid}`);\n\n        this.conn.onopen = () => {\n            // Update Status to Online\n            console.log('connected', this.userid);\n\n            const start_dialog_msg = {\n                access_token: this.userid,\n                domain: 0,\n                topic: 'start_dialog',\n                courseid: this.courseid,\n                slidefindertoken: this.slidefindertoken\n            };\n\n            console.log(\"START MSG\", start_dialog_msg);\n            this.conn.send(JSON.stringify(start_dialog_msg));\n        };\n        this.conn.onmessage = (msg) => {\n            // Parse received data\n            const data = JSON.parse(msg.data);\n            console.log(\"Received data\", data);\n            // render each message\n            data.forEach(message => {\n                if(message.party === \"system\") {\n                    addSystemMessage(message.content);\n                } else if(message.party === \"control\") {\n                    if(message.content === \"UI_OPEN\") {\n                        setWindowState(true);\n                    }\n                }\n                else {\n                    addUserMessage(message.content);\n                }\n            });\n        };\n    };\n\n    sendMessage = (message) => {\n        const msg = {\n            userid: this.userid,\n            domain: 0,\n            topic: 'user_utterance',\n            courseid: this.courseid,\n            msg: message\n        };\n        console.log(\"Sending message\", msg);\n        this.conn.send(JSON.stringify(msg));\n    };\n}\n\nconst isInsideIFrame = () => {\n    if (window.location !== window.parent.location)\n    {\n        // inside iframe\n        return true;\n    }\n    else {\n        // The page is not in an iFrame\n        return false;\n    }\n};\n\nvar conn;\n\n\nexport const init = (server_name, server_port, server_url, userid, username, courseid, slidefindertoken) => {\n    if(isInsideIFrame()) {\n        console.log(\"IFrame detected - Chatbot won't be loaded\");\n        return;\n    }\n    console.log(\"SERVER\", server_name);\n    console.log(\"PORT\", server_port);\n    console.log(\"URL\", server_url);\n    console.log(\"USER\", userid, username);\n    console.log(\"COURSE\", courseid);\n    console.log(\"SLIDEFINDER TOKEN\", slidefindertoken);\n\n    registerEventListeners();\n    conn = new ChatbotConnection(server_name, server_port, userid, courseid, slidefindertoken);\n    conn.openConnection();\n\n    // Move container into document root\n    const chatwindow = $(\"#block_chatbot-chatwindow\");\n    chatwindow.detach();\n    $(document.body).append(chatwindow);\n\n    // Set or restore minimized state\n    if (localStorage.getItem(\"chatbot.maximized\") === null) {\n        localStorage.setItem(\"chatbot.maximized\", \"false\");\n    }\n    setWindowState(localStorage.getItem(\"chatbot.maximized\") === \"true\");\n\n    return conn;\n};\n"],"names":["sendMessage","textInputField","user_input","val","conn","addUserMessage","utterance","messagelist","append","animate","scrollTop","prop","addSystemMessage","startsWith","messageBubble","document","createElement","className","message","style","color","args","split","outerValue","innerValue","DonutChart","render","renderChart","setWindowState","maximized","console","log","removeClass","addClass","localStorage","setItem","ChatbotConnection","constructor","server_name","server_port","userid","courseid","slidefindertoken","this","WebSocket","onopen","start_dialog_msg","access_token","domain","topic","send","JSON","stringify","onmessage","msg","data","parse","forEach","party","content","server_url","username","window","location","parent","addEventListener","e","target","closest","Selectors","actions","maximiseChatWindow","alert","minimizeChatWindow","toggleWindowState","getItem","textInput","key","openConnection","chatwindow","detach","body"],"mappings":"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"}