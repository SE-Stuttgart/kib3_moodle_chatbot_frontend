{"version":3,"file":"chatbot.min.js","sources":["../src/chatbot.js"],"sourcesContent":["import Selectors from './local/selectors';\nimport DonutChart from './local/charts/donut/donut';\nimport LineChart from './local/charts/line/line';\nimport $ from 'jquery';\n\n\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.maximiseChatWindow)) {\n            window.alert(\"MAXIMISE\");\n        } else if(e.target.closest(Selectors.actions.minimizeChatWindow)) {\n            window.alert(\"MINIMIZE\");\n        } else if(e.target.closest(Selectors.actions.sendMessage)) {\n            // get value of input field, then send\n            const textInputField = $(\"#block_chatbot-userUtterance\");\n            const user_input = textInputField.val();\n            sendMessage(user_input);\n        } else if(e.target.closest(Selectors.actions.toggleWindowState)) {\n            setWindowState(!(localStorage.getItem(\"chatbot.maximized\") === \"true\"));\n        }\n    });\n    document.addEventListener('keydown', e => {\n        if (e.target.closest(Selectors.actions.textInput)) {\n            if(e.key === \"Enter\") {\n                // get value of input field, then send\n                const textInputField = $(\"#block_chatbot-userUtterance\");\n                const user_input = textInputField.val();\n                sendMessage(user_input);\n            }\n        }\n    });\n};\n\nconst sendMessage = (user_input) => {\n    console.log(\"SENDING\", user_input);\n    // forwad value of input field to socket & send message\n    conn.sendMessage(user_input);\n    // show user message in messagelist\n    addUserMessage(user_input);\n    // clear input field\n    const textInputField = $(\"#block_chatbot-userUtterance\");\n    textInputField.val(\"\");\n};\n\n\nconst addUserMessage = (utterance) => {\n    /*\n    Adds a new messagebox to the message list\n    Args:\n        utterance (String): the user utterance\n    */\n   // remove answer candidates\n    $(\".block_chatbot-answer_candidate_list\").remove();\n\n    // add user message\n    const messagelist = $('#block_chatbot-messagelist');\n    messagelist.append(`\n        <div class=\"block_chatbot-speech-bubble block_chatbot-user\">\n            <div class=\"block_chatbot-message\" style=\"color: anthrazit\">${utterance}</div>\n        </div>\n    `);\n\n    // scroll to newest message\n    messagelist.animate({ scrollTop: messagelist.prop(\"scrollHeight\")}, 500);\n};\n\nconst renderComponent = (utterance) => {\n    const messagelist = $('#block_chatbot-messagelist');\n    const messageBubble = document.createElement(\"div\");\n    messageBubble.className = \"block_chatbot-speech-bubble block_chatbot-system\";\n    const message = document.createElement(\"div\");\n    message.className = \"block_chatbot-message\";\n    message.style.color = \"anthrazit\";\n\n    const args = utterance.split(\";\");\n    const component_type = args[0].replace(\"$$\", \"\");\n    if(component_type === \"DONUT\") {\n        const outerTitle = args[1];\n        const outerValue = args[2];\n        const innerTitle = args.length > 3? args[3] : null;\n        const innerValue = args.length > 4? args[4] : null;\n        const plot = new DonutChart(outerValue, outerTitle, innerValue, innerTitle).render();\n        message.append(plot);\n    } else if(component_type === \"LINECHART\") {\n        const legendTitle1 = args[1];\n        const values1 = JSON.parse(args[2]);\n        const legendTitle2 = args[3];\n        const values2 = JSON.parse(args[4]);\n        var plot = document.createElement(\"div\");\n        plot.className = \"block_chatbot-plotly-chart\";\n        console.log(\"TITLE\", legendTitle1, \",\", legendTitle2);\n        console.log(\"DATA1\", values1);\n        console.log(\"DATA2\", values2);\n        message.append(plot);\n        new LineChart(plot, legendTitle1, values1, legendTitle2, values2).render(Plotly);\n    } else if(component_type === \"QUIZ\") {\n        const quiz_args = JSON.parse(args[1]);\n        console.log(\"QUIZ ARGS\", quiz_args);\n        messageBubble.style.width = `80%`;\n        message.style.width = `100%`;\n        var iframe = document.createElement(\"iframe\");\n        iframe.src = `${quiz_args.host}/h5p/embed.php?url=${quiz_args.host}/pluginfile.php/${quiz_args.context}` +\n                     `/mod_h5pactivity/${quiz_args.filearea}/${quiz_args.itemid}/${quiz_args.filename}` +\n                     `&preventredirect=1&component=mod_h5pactivity`;\n        iframe.className = \"h5p-player border-0 block_chatbot-quiz\";\n        message.append(iframe);\n    }\n    messageBubble.append(message);\n    messagelist.append(messageBubble);\n};\n\n\nconst createAnswerCandidateButton = (candidate) => {\n    var button = document.createElement(\"p\");\n    button.className = \"block_chatbot-answer_candidate\";\n    button.textContent = candidate;\n    button.onclick = () => sendMessage(candidate);\n    return button;\n};\n\nconst addSystemMessage = (utterance) => {\n    /*\n    Adds a new messagebox to the message list\n    Args:\n        utterance (String): the system utterance\n    */\n    const messagelist = $('#block_chatbot-messagelist');\n    const content = utterance[0];\n    const answerCandidates = utterance[1];\n\n    if(content.startsWith(\"$$\")) {\n        renderComponent(content);\n    } else {\n        var systemBubble = document.createElement(\"div\");\n        systemBubble.className = \"block_chatbot-speech-bubble block_chatbot-system\";\n        var systemMessage = document.createElement(\"div\");\n        systemMessage.innerHTML = content;\n        systemMessage.className = \"block_chatbot-message\";\n        systemMessage.style.color = \"anthrazit\";\n        systemBubble.append(systemMessage);\n        if(answerCandidates.length > 0) {\n            var answer_candidate_el = document.createElement(\"div\");\n            answer_candidate_el.className = \"block_chatbot-answer_candidate_list\";\n            answerCandidates.forEach(cand => answer_candidate_el.append(createAnswerCandidateButton(cand)));\n            systemBubble.append(answer_candidate_el);\n        }\n        messagelist.append(systemBubble);\n    }\n\n    // scroll to newest message\n    messagelist.animate({ scrollTop: messagelist.prop(\"scrollHeight\")}, 500);\n};\n\nconst setWindowState = (maximized) => {\n    console.log(\"Window state\", maximized);\n\n    if(maximized) {\n        $(\"#block_chatbot-messagelist\").removeClass('block_chatbot-hidden');\n        $(\".block_chatbot-inputContainer\").removeClass('block_chatbot-hidden');\n        $(\".block_chatbot-chatwindowInner\").removeClass('block_chatbot-hidden');\n        $(\".block_chatbot-headerMinimized\").addClass('block_chatbot-hidden');\n    } else {\n        $(\"#block_chatbot-messagelist\").addClass('block_chatbot-hidden');\n        $(\".block_chatbot-inputContainer\").addClass('block_chatbot-hidden');\n        $(\".block_chatbot-chatwindowInner\").addClass('block_chatbot-hidden');\n        $(\".block_chatbot-headerMinimized\").removeClass('block_chatbot-hidden');\n    }\n    // remember state\n    localStorage.setItem(\"chatbot.maximized\", maximized? \"true\" : \"false\");\n};\n\nconst resizeWindow = (size) => {\n    console.log(\"Resize to\", size);\n\n    if(size == \"UI_SIZE_DEFAULT\") {\n        $(\".block_chatbot-chatwindowInner\").removeClass('block_chatbot-big');\n        $(\".block_chatbot-chatwindowInner\").addClass('block_chatbot-default');\n    } else if(size == \"UI_SIZE_LARGE\") {\n        $(\".block_chatbot-chatwindowInner\").removeClass('block_chatbot-default');\n        $(\".block_chatbot-chatwindowInner\").addClass('block_chatbot-big');\n    }\n};\n\nclass ChatbotConnection {\n    constructor(server_name, server_port, userid, courseid, slidefindertoken, timestamp) {\n        this.server_name = server_name;\n        this.server_port = server_port;\n        this.userid = userid;\n        this.courseid = courseid;\n        this.slidefindertoken = slidefindertoken;\n        this.timestamp = timestamp;\n        this.conn = null;\n    }\n\n    openConnection = () => {\n        console.log(`Connecting to: ws://${this.server_name}:${this.server_port}/ws?token=${this.userid}`);\n        this.conn = new WebSocket(`ws://${this.server_name}:${this.server_port}/ws?token=${this.userid}`);\n\n        this.conn.onopen = () => {\n            // Update Status to Online\n            console.log('connected', this.userid);\n\n            const start_dialog_msg = {\n                access_token: this.userid,\n                domain: 0,\n                topic: 'start_dialog',\n                courseid: this.courseid,\n                slidefindertoken: this.slidefindertoken,\n                timestamp: this.timestamp\n            };\n\n            console.log(\"START MSG\", start_dialog_msg);\n            this.conn.send(JSON.stringify(start_dialog_msg));\n        };\n        this.conn.onmessage = (msg) => {\n            // Parse received data\n            const data = JSON.parse(msg.data);\n            console.log(\"Received data\", data);\n            // render each message\n            data.forEach(message => {\n                if(message.party === \"system\") {\n                    addSystemMessage(message.content);\n                } else if(message.party === \"control\") {\n                    if(message.content === \"UI_OPEN\") {\n                        setWindowState(true);\n                    } else if(message.content.startsWith(\"UI_SIZE\")) {\n                        resizeWindow(message.content);\n                    }\n                }\n                else {\n                    addUserMessage(message.content);\n                }\n            });\n        };\n    };\n\n    sendMessage = (message) => {\n        const msg = {\n            userid: this.userid,\n            domain: 0,\n            topic: 'user_utterance',\n            courseid: this.courseid,\n            msg: message\n        };\n        console.log(\"Sending message\", msg);\n        this.conn.send(JSON.stringify(msg));\n    };\n}\n\nconst isInsideIFrame = () => {\n    if (window.location !== window.parent.location)\n    {\n        // inside iframe\n        return true;\n    }\n    else {\n        // The page is not in an iFrame\n        return false;\n    }\n};\n\nvar conn;\nvar Plotly;\n\nexport const init = (server_name, server_port, server_url, userid, username, courseid, slidefindertoken, timestamp, plotly) => {\n    if(isInsideIFrame()) {\n        console.log(\"IFrame detected - Chatbot won't be loaded\");\n        return;\n    }\n    console.log(\"SERVER\", server_name);\n    console.log(\"PORT\", server_port);\n    console.log(\"URL\", server_url);\n    console.log(\"USER\", userid, username);\n    console.log(\"COURSE\", courseid);\n    console.log(\"SLIDEFINDER TOKEN\", slidefindertoken);\n    console.log(\"TIMESTAMP\", timestamp);\n\n    Plotly = plotly;\n    registerEventListeners();\n    conn = new ChatbotConnection(server_name, server_port, userid, courseid, slidefindertoken, timestamp);\n    conn.openConnection();\n\n    // Move container into document root\n    const chatwindow = $(\"#block_chatbot-chatwindow\");\n    chatwindow.detach();\n    $(document.body).append(chatwindow);\n\n    // Set or restore minimized state\n    if (localStorage.getItem(\"chatbot.maximized\") === null) {\n        localStorage.setItem(\"chatbot.maximized\", \"false\");\n    }\n    setWindowState(localStorage.getItem(\"chatbot.maximized\") === \"true\");\n\n    // Minimize chatbot when clicking outside\n    document.addEventListener('click', function(event) {\n        var chatbot = document.getElementById('block_chatbot-chatwindow');\n        // Check if the clicked element is outside the \"chatbot\" div\n        if (event.target !== chatbot && !chatbot.contains(event.target)) {\n            // Check if the clicked element is not inside the \"chatbot\" div\n            setWindowState(false);\n        }\n    });\n\n    return conn;\n};\n"],"names":["sendMessage","user_input","console","log","conn","addUserMessage","val","utterance","remove","messagelist","append","animate","scrollTop","prop","addSystemMessage","content","answerCandidates","startsWith","messageBubble","document","createElement","className","message","style","color","args","split","component_type","replace","outerTitle","outerValue","innerTitle","length","innerValue","plot","DonutChart","render","legendTitle1","values1","JSON","parse","legendTitle2","values2","LineChart","Plotly","quiz_args","width","iframe","src","host","context","filearea","itemid","filename","renderComponent","systemBubble","systemMessage","innerHTML","answer_candidate_el","forEach","cand","candidate","button","textContent","onclick","setWindowState","maximized","removeClass","addClass","localStorage","setItem","ChatbotConnection","constructor","server_name","server_port","userid","courseid","slidefindertoken","timestamp","this","WebSocket","onopen","start_dialog_msg","access_token","domain","topic","send","stringify","onmessage","msg","data","size","party","server_url","username","plotly","window","location","parent","addEventListener","e","target","closest","Selectors","actions","maximiseChatWindow","alert","minimizeChatWindow","toggleWindowState","getItem","textInput","key","openConnection","chatwindow","detach","body","event","chatbot","getElementById","contains"],"mappings":"6pBAiCMA,YAAeC,aACjBC,QAAQC,IAAI,UAAWF,YAEvBG,KAAKJ,YAAYC,YAEjBI,eAAeJ,aAEQ,mBAAE,gCACVK,IAAI,KAIjBD,eAAkBE,gCAOlB,wCAAwCC,eAGpCC,aAAc,mBAAE,8BACtBA,YAAYC,iKAE0DH,2CAKtEE,YAAYE,QAAQ,CAAEC,UAAWH,YAAYI,KAAK,iBAAkB,MAyDlEC,iBAAoBP,kBAMhBE,aAAc,mBAAE,8BAChBM,QAAUR,UAAU,GACpBS,iBAAmBT,UAAU,MAEhCQ,QAAQE,WAAW,MAhEDV,CAAAA,kBACfE,aAAc,mBAAE,8BAChBS,cAAgBC,SAASC,cAAc,OAC7CF,cAAcG,UAAY,yDACpBC,QAAUH,SAASC,cAAc,OACvCE,QAAQD,UAAY,wBACpBC,QAAQC,MAAMC,MAAQ,kBAEhBC,KAAOlB,UAAUmB,MAAM,KACvBC,eAAiBF,KAAK,GAAGG,QAAQ,KAAM,OACvB,UAAnBD,eAA4B,OACrBE,WAAaJ,KAAK,GAClBK,WAAaL,KAAK,GAClBM,WAAaN,KAAKO,OAAS,EAAGP,KAAK,GAAK,KACxCQ,WAAaR,KAAKO,OAAS,EAAGP,KAAK,GAAK,KACxCS,KAAO,IAAIC,eAAWL,WAAYD,WAAYI,WAAYF,YAAYK,SAC5Ed,QAAQZ,OAAOwB,WACZ,GAAsB,cAAnBP,eAAgC,OAChCU,aAAeZ,KAAK,GACpBa,QAAUC,KAAKC,MAAMf,KAAK,IAC1BgB,aAAehB,KAAK,GACpBiB,QAAUH,KAAKC,MAAMf,KAAK,QAC5BS,KAAOf,SAASC,cAAc,OAClCc,KAAKb,UAAY,6BACjBnB,QAAQC,IAAI,QAASkC,aAAc,IAAKI,cACxCvC,QAAQC,IAAI,QAASmC,SACrBpC,QAAQC,IAAI,QAASuC,SACrBpB,QAAQZ,OAAOwB,UACXS,cAAUT,KAAMG,aAAcC,QAASG,aAAcC,SAASN,OAAOQ,aACtE,GAAsB,SAAnBjB,eAA2B,OAC3BkB,UAAYN,KAAKC,MAAMf,KAAK,IAClCvB,QAAQC,IAAI,YAAa0C,WACzB3B,cAAcK,MAAMuB,YACpBxB,QAAQC,MAAMuB,iBACVC,OAAS5B,SAASC,cAAc,UACpC2B,OAAOC,IAAM,UAAGH,UAAUI,mCAA0BJ,UAAUI,gCAAuBJ,UAAUK,oCAC9DL,UAAUM,qBAAYN,UAAUO,mBAAUP,UAAUQ,yDAErFN,OAAO1B,UAAY,yCACnBC,QAAQZ,OAAOqC,QAEnB7B,cAAcR,OAAOY,SACrBb,YAAYC,OAAOQ,gBAuBfoC,CAAgBvC,aACb,KACCwC,aAAepC,SAASC,cAAc,OAC1CmC,aAAalC,UAAY,uDACrBmC,cAAgBrC,SAASC,cAAc,UAC3CoC,cAAcC,UAAY1C,QAC1ByC,cAAcnC,UAAY,wBAC1BmC,cAAcjC,MAAMC,MAAQ,YAC5B+B,aAAa7C,OAAO8C,eACjBxC,iBAAiBgB,OAAS,EAAG,KACxB0B,oBAAsBvC,SAASC,cAAc,OACjDsC,oBAAoBrC,UAAY,sCAChCL,iBAAiB2C,SAAQC,OAAQF,OAAAA,oBAAoBhD,QA/B5BmD,UA+B+DD,MA9B5FE,OAAS3C,SAASC,cAAc,MAC7BC,UAAY,iCACnByC,OAAOC,YAAcF,UACrBC,OAAOE,QAAU,IAAMhE,YAAY6D,WAC5BC,SAL0BD,IAAAA,UAC7BC,UA+BIP,aAAa7C,OAAOgD,qBAExBjD,YAAYC,OAAO6C,cAIvB9C,YAAYE,QAAQ,CAAEC,UAAWH,YAAYI,KAAK,iBAAkB,MAGlEoD,eAAkBC,YACpBhE,QAAQC,IAAI,eAAgB+D,WAEzBA,+BACG,8BAA8BC,YAAY,4CAC1C,iCAAiCA,YAAY,4CAC7C,kCAAkCA,YAAY,4CAC9C,kCAAkCC,SAAS,8CAE3C,8BAA8BA,SAAS,4CACvC,iCAAiCA,SAAS,4CAC1C,kCAAkCA,SAAS,4CAC3C,kCAAkCD,YAAY,yBAGpDE,aAAaC,QAAQ,oBAAqBJ,UAAW,OAAS,gBAe5DK,kBACFC,YAAYC,YAAaC,YAAaC,OAAQC,SAAUC,iBAAkBC,kDAUzD,KACb5E,QAAQC,kCAA2B4E,KAAKN,wBAAeM,KAAKL,iCAAwBK,KAAKJ,cACpFvE,KAAO,IAAI4E,yBAAkBD,KAAKN,wBAAeM,KAAKL,iCAAwBK,KAAKJ,cAEnFvE,KAAK6E,OAAS,KAEf/E,QAAQC,IAAI,YAAa4E,KAAKJ,cAExBO,iBAAmB,CACrBC,aAAcJ,KAAKJ,OACnBS,OAAQ,EACRC,MAAO,eACPT,SAAUG,KAAKH,SACfC,iBAAkBE,KAAKF,iBACvBC,UAAWC,KAAKD,WAGpB5E,QAAQC,IAAI,YAAa+E,uBACpB9E,KAAKkF,KAAK/C,KAAKgD,UAAUL,yBAE7B9E,KAAKoF,UAAaC,YAEbC,KAAOnD,KAAKC,MAAMiD,IAAIC,MAC5BxF,QAAQC,IAAI,gBAAiBuF,MAE7BA,KAAK/B,SAAQrC,UAhDHqE,IAAAA,KAiDe,WAAlBrE,QAAQsE,MACP9E,iBAAiBQ,QAAQP,SACD,YAAlBO,QAAQsE,MACS,YAApBtE,QAAQP,QACPkD,gBAAe,GACT3C,QAAQP,QAAQE,WAAW,aAtDnC0E,KAuDerE,QAAQP,QAtDzCb,QAAQC,IAAI,YAAawF,MAEd,mBAARA,0BACG,kCAAkCxB,YAAY,yCAC9C,kCAAkCC,SAAS,0BAC/B,iBAARuB,2BACJ,kCAAkCxB,YAAY,6CAC9C,kCAAkCC,SAAS,uBAmDjC/D,eAAeiB,QAAQP,oDAMxBO,gBACLmE,IAAM,CACRd,OAAQI,KAAKJ,OACbS,OAAQ,EACRC,MAAO,iBACPT,SAAUG,KAAKH,SACfa,IAAKnE,SAETpB,QAAQC,IAAI,kBAAmBsF,UAC1BrF,KAAKkF,KAAK/C,KAAKgD,UAAUE,cA5DzBhB,YAAcA,iBACdC,YAAcA,iBACdC,OAASA,YACTC,SAAWA,cACXC,iBAAmBA,sBACnBC,UAAYA,eACZ1E,KAAO,UAsEhBA,KACAwC,qBAEgB,CAAC6B,YAAaC,YAAamB,WAAYlB,OAAQmB,SAAUlB,SAAUC,iBAAkBC,UAAWiB,aAd5GC,OAAOC,WAAaD,OAAOE,OAAOD,qBAgBlC/F,QAAQC,IAAI,6CAGhBD,QAAQC,IAAI,SAAUsE,aACtBvE,QAAQC,IAAI,OAAQuE,aACpBxE,QAAQC,IAAI,MAAO0F,YACnB3F,QAAQC,IAAI,OAAQwE,OAAQmB,UAC5B5F,QAAQC,IAAI,SAAUyE,UACtB1E,QAAQC,IAAI,oBAAqB0E,kBACjC3E,QAAQC,IAAI,YAAa2E,WAEzBlC,OAASmD,OA9QT5E,SAASgF,iBAAiB,SAASC,OAC3BA,EAAEC,OAAOC,QAAQC,mBAAUC,QAAQC,oBACnCT,OAAOU,MAAM,iBACV,GAAGN,EAAEC,OAAOC,QAAQC,mBAAUC,QAAQG,oBACzCX,OAAOU,MAAM,iBACV,GAAGN,EAAEC,OAAOC,QAAQC,mBAAUC,QAAQxG,aAAc,OAGjDC,YADiB,mBAAE,gCACSK,MAClCN,YAAYC,iBACNmG,EAAEC,OAAOC,QAAQC,mBAAUC,QAAQI,oBACzC3C,iBAA+D,SAA9CI,aAAawC,QAAQ,0BAG9C1F,SAASgF,iBAAiB,WAAWC,OAC7BA,EAAEC,OAAOC,QAAQC,mBAAUC,QAAQM,YACtB,UAAVV,EAAEW,IAAiB,OAGZ9G,YADiB,mBAAE,gCACSK,MAClCN,YAAYC,iBA4PxBG,KAAO,IAAImE,kBAAkBE,YAAaC,YAAaC,OAAQC,SAAUC,iBAAkBC,YACtFkC,uBAGCC,YAAa,mBAAE,oCACrBA,WAAWC,6BACT/F,SAASgG,MAAMzG,OAAOuG,YAG0B,OAA9C5C,aAAawC,QAAQ,sBACrBxC,aAAaC,QAAQ,oBAAqB,SAE9CL,eAA6D,SAA9CI,aAAawC,QAAQ,sBAGpC1F,SAASgF,iBAAiB,SAAS,SAASiB,WACpCC,QAAUlG,SAASmG,eAAe,4BAElCF,MAAMf,SAAWgB,SAAYA,QAAQE,SAASH,MAAMf,SAEpDpC,gBAAe,MAIhB7D"}