{"version":3,"file":"settings.min.js","sources":["../../src/local/settings.js"],"sourcesContent":["export const fetchUserSetttings = async (userid, wstoken, wwwroot) => {\n    // Fetch settings\n    const url = wwwroot + '/webservice/rest/server.php';\n    const urlencoded = new URLSearchParams();\n    urlencoded.append(\"wstoken\", wstoken);\n    urlencoded.append(\"moodlewsrestformat\",  \"json\");\n    urlencoded.append(\"wsfunction\", \"block_chatbot_get_usersettings\");\n    urlencoded.append(\"userid\", userid);\n    const response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: urlencoded\n        }\n    );\n    // Parse settings\n    const msgContent = await response.text();\n    // handle moodle debug mode, which appends a <script> tag to the response\n    const settings = JSON.parse(msgContent.replace(/<script[\\s\\S]*?<\\/script>/gi, ''));\n    return settings;\n};\n\nexport const assignUserSettings = (settings) => {\n    document.getElementById(\"block_chatbot_enabled\").checked = settings.enabled;\n    // document.getElementById(\"block_chatbot_logging\").checked = settings.logging;\n    document.getElementById(\"block_chatbot_openonlogin\").checked = settings.openonlogin;\n    document.getElementById(\"block_chatbot_openonquiz\").checked = settings.openonquiz;\n    document.getElementById(\"block_chatbot_openonsection\").checked = settings.openonsection;\n    document.getElementById(\"block_chatbot_openonbranch\").checked = settings.openonbranch;\n    document.getElementById(\"block_chatbot_openonbadge\").checked = settings.openonbadge;\n    document.getElementById(\"block_chatbot_numreviewquizzes\").value = settings.numreviewquizzes;\n    document.getElementById(\"block_chatbot_numsearchresults\").value = settings.numsearchresults;\n    new Array(\"resource\", \"url\", \"book\").forEach(content_type => {\n        document.getElementById('block_chatbot_preferedcontenttype_' + content_type).checked =\n             settings.preferedcontenttype == content_type;\n    });\n};\n\nexport const readUserSettings = () => {\n    const preferedcontenttype = new Array(\"resource\", \"url\", \"book\").map(content_type =>\n        document.getElementById('block_chatbot_preferedcontenttype_' + content_type\n        )).filter(el => el.checked)[0].id.replace(\"block_chatbot_preferedcontenttype_\", \"\");\n    return {\n        enabled: document.getElementById(\"block_chatbot_enabled\").checked,\n        logging: false,\n        openonlogin: document.getElementById(\"block_chatbot_openonlogin\").checked,\n        openonquiz: document.getElementById(\"block_chatbot_openonquiz\").checked,\n        openonsection: document.getElementById(\"block_chatbot_openonsection\").checked,\n        openonbranch: document.getElementById(\"block_chatbot_openonbranch\").checked,\n        openonbadge: document.getElementById(\"block_chatbot_openonbadge\").checked,\n        numreviewquizzes: document.getElementById(\"block_chatbot_numreviewquizzes\").value,\n        numsearchresults: document.getElementById(\"block_chatbot_numsearchresults\").value,\n        preferedcontenttype: preferedcontenttype\n    };\n};\n\nexport const saveUserSetttings = async (userid, wstoken, wwwroot, settings) => {\n    // Construct request\n    settings.firstturn = false;\n\n    let url = wwwroot + '/webservice/rest/server.php';\n    const urlencoded = new URLSearchParams();\n    urlencoded.append(\"wstoken\", wstoken);\n    urlencoded.append(\"moodlewsrestformat\",  \"json\");\n    urlencoded.append(\"wsfunction\", \"block_chatbot_set_usersettings\");\n    urlencoded.append(\"userid\", userid);\n    Object.keys(settings).forEach(key =>\n        urlencoded.append(key, typeof settings[key] === \"boolean\"? Number(settings[key]) : settings[key])\n    );\n    const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: urlencoded\n    }\n    );\n    const msgContent = await response.text();\n    return true;\n};\n"],"names":["async","userid","wstoken","wwwroot","url","urlencoded","URLSearchParams","append","response","fetch","method","headers","body","msgContent","text","JSON","parse","replace","settings","document","getElementById","checked","enabled","openonlogin","openonquiz","openonsection","openonbranch","openonbadge","value","numreviewquizzes","numsearchresults","Array","forEach","content_type","preferedcontenttype","map","filter","el","id","logging","firstturn","Object","keys","key","Number"],"mappings":"8QAAkCA,MAAOC,OAAQC,QAASC,iBAEhDC,IAAMD,QAAU,8BAChBE,WAAa,IAAIC,gBACvBD,WAAWE,OAAO,UAAWL,SAC7BG,WAAWE,OAAO,qBAAuB,QACzCF,WAAWE,OAAO,aAAc,kCAChCF,WAAWE,OAAO,SAAUN,cACtBO,eAAiBC,MAAML,IAAK,CAC1BM,OAAQ,OACRC,QAAS,gBACW,qCAEpBC,KAAMP,aAIRQ,iBAAmBL,SAASM,cAEjBC,KAAKC,MAAMH,WAAWI,QAAQ,8BAA+B,kCAI/CC,WAC/BC,SAASC,eAAe,yBAAyBC,QAAUH,SAASI,QAEpEH,SAASC,eAAe,6BAA6BC,QAAUH,SAASK,YACxEJ,SAASC,eAAe,4BAA4BC,QAAUH,SAASM,WACvEL,SAASC,eAAe,+BAA+BC,QAAUH,SAASO,cAC1EN,SAASC,eAAe,8BAA8BC,QAAUH,SAASQ,aACzEP,SAASC,eAAe,6BAA6BC,QAAUH,SAASS,YACxER,SAASC,eAAe,kCAAkCQ,MAAQV,SAASW,iBAC3EV,SAASC,eAAe,kCAAkCQ,MAAQV,SAASY,qBACvEC,MAAM,WAAY,MAAO,QAAQC,SAAQC,eACzCd,SAASC,eAAe,qCAAuCa,cAAcZ,QACxEH,SAASgB,qBAAuBD,2CAIb,WACtBC,oBAAsB,IAAIH,MAAM,WAAY,MAAO,QAAQI,KAAIF,cACjEd,SAASC,eAAe,qCAAuCa,gBAC5DG,QAAOC,IAAMA,GAAGhB,UAAS,GAAGiB,GAAGrB,QAAQ,qCAAsC,UAC7E,CACHK,QAASH,SAASC,eAAe,yBAAyBC,QAC1DkB,SAAS,EACThB,YAAaJ,SAASC,eAAe,6BAA6BC,QAClEG,WAAYL,SAASC,eAAe,4BAA4BC,QAChEI,cAAeN,SAASC,eAAe,+BAA+BC,QACtEK,aAAcP,SAASC,eAAe,8BAA8BC,QACpEM,YAAaR,SAASC,eAAe,6BAA6BC,QAClEQ,iBAAkBV,SAASC,eAAe,kCAAkCQ,MAC5EE,iBAAkBX,SAASC,eAAe,kCAAkCQ,MAC5EM,oBAAqBA,iDAIIlC,MAAOC,OAAQC,QAASC,QAASe,YAE9DA,SAASsB,WAAY,MAEjBpC,IAAMD,QAAU,oCACdE,WAAa,IAAIC,gBACvBD,WAAWE,OAAO,UAAWL,SAC7BG,WAAWE,OAAO,qBAAuB,QACzCF,WAAWE,OAAO,aAAc,kCAChCF,WAAWE,OAAO,SAAUN,QAC5BwC,OAAOC,KAAKxB,UAAUc,SAAQW,KAC1BtC,WAAWE,OAAOoC,IAA8B,kBAAlBzB,SAASyB,KAAoBC,OAAO1B,SAASyB,MAAQzB,SAASyB,cAE1FnC,eAAiBC,MAAML,IAAK,CAC9BM,OAAQ,OACRC,QAAS,gBACW,qCAEpBC,KAAMP,mBAGeG,SAASM,cAC3B"}