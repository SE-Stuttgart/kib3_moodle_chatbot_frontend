{"version":3,"file":"donut.min.js","sources":["../../../../src/local/charts/donut/donut.js"],"sourcesContent":["\nclass DonutChart {\n    constructor(percentageOuter, legendOuter, percentageInner, legendInner) {\n        this.percentageOuter = percentageOuter;\n        this.legendOuter = legendOuter;\n        this.percentageOuterEmpty = 100 - this.percentageOuter;\n        this.percentageInnerEmpty = (100 - percentageInner) * 0.75;\n        this.percentageInner = percentageInner * 0.75;\n        this.legendInner = legendInner;\n    }\n\n    getTextWidth = (text, font) => {\n        const element = document.createElement('canvas');\n        const context = element.getContext('2d');\n        context.font = font;\n        return context.measureText(text).width;\n    };\n\n    render = () => {\n        var chart = document.createElement(\"div\");\n        chart.classList.add('svg-chart');\n\n        const font = '5px serif';\n        const outerTextWidth = this.getTextWidth(this.legendOuter, font);\n        const innerTextWidth = this.legendInner !== null? this.getTextWidth(this.legendInner, font) : 0;\n        const totalWidth = 40 + 3 + 7 + Math.max(outerTextWidth, innerTextWidth); // chart size + spacing + rect + legend\n\n        const outer_ring = `\n        <circle class=\"donut-ring\" cx=\"20\" cy=\"20\" r=\"16\" fill=\"transparent\" stroke-width=\"3.5\"/>\n        <circle class=\"donut-segment-outer\" cx=\"20\" cy=\"20\" r=\"16\" fill=\"transparent\" stroke-width=\"4\" \n            stroke-dasharray=\"${this.percentageOuter} ${this.percentageOuterEmpty}\"\n            stroke-dashoffset=\"25\"/>`;\n        const outer_legend = `<g>\n                                <rect x=\"0\" y=\"0\" width=\"4\" height=\"4\" fill=\"#8de239\"/>\n                                <text x=\"7\" y=\"2.5\" font-size=\"5\" alignment-baseline=\"middle\" fill=\"white\">\n                                    ${this.legendOuter}\n                                </text>\n                            </g>`;\n\n        const inner_ring = this.percentageInner !== null? `\n        <circle class=\"donut-ring\" cx=\"20\" cy=\"20\" r=\"12\" fill=\"transparent\" stroke-width=\"3.5\"/>\n        <circle class=\"donut-segment-inner\" cx=\"20\" cy=\"20\" r=\"12\" fill=\"transparent\" stroke-width=\"4\"\n            stroke-dasharray=\"${this.percentageInner} ${this.percentageInnerEmpty}\"\n            stroke-dashoffset=\"18.75\"></circle>`\n            : \"\";\n        const inner_legend = this.percentageInner !== null? `<g>\n                <rect x=\"0\" y=\"7\" width=\"4\" height=\"4\" fill=\"#ff6200\"/>\n                <text x=\"7\" y=\"9.5\" font-size=\"5\" alignment-baseline=\"middle\" fill=\"white\">\n                    ${this.legendInner}\n                </text>\n            </g>` : \"\";\n\n        chart.innerHTML = `<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 ${totalWidth} 40\" class=\"donut\">\n                <circle class=\"donut-hole\" cx=\"20\" cy=\"20\" r=\"15.91549430918954\" fill=\"#fff\"/>\n                ${outer_ring}\n                ${inner_ring}\n                <g transform=\"translate(43 17.5)\">\n                    ${outer_legend}\n                    ${inner_legend}\n                </g>\n            </svg>`;\n\n        chart.getElementsByClassName('donut-segment-outer')[0].animate(\n            [\n                { strokeDasharray: \"0, 100\" },\n                { strokeDasharray: `${this.percentageOuter} ${this.percentageOuterEmpty}`}\n            ], {duration: 3000}\n        );\n        chart.getElementsByClassName('donut-segment-inner')[0].animate(\n            [\n                { strokeDasharray: \"0, 75\" },\n                { strokeDasharray: `${this.percentageInner} ${this.percentageInnerEmpty}`}\n            ], {duration: 3000}\n        );\n\n        return chart;\n        //     <g class=\"donut-text\">\n        //     <text y=\"50%\" transform=\"translate(0, 2)\">\n        //     <tspan x=\"50%\" text-anchor=\"middle\" class=\"donut-percent\">${this.percentage}%</tspan>\n        //     </text>\n        // </g>\n    };\n}\n\nexport default DonutChart;"],"names":["constructor","percentageOuter","legendOuter","percentageInner","legendInner","text","font","context","document","createElement","getContext","measureText","width","chart","classList","add","outerTextWidth","this","getTextWidth","innerTextWidth","totalWidth","Math","max","outer_ring","percentageOuterEmpty","outer_legend","inner_ring","percentageInnerEmpty","inner_legend","innerHTML","getElementsByClassName","animate","strokeDasharray","duration"],"mappings":"uVAEIA,YAAYC,gBAAiBC,YAAaC,gBAAiBC,kDAS5C,CAACC,KAAMC,cAEZC,QADUC,SAASC,cAAc,UACfC,WAAW,aACnCH,QAAQD,KAAOA,KACRC,QAAQI,YAAYN,MAAMO,wCAG5B,SACDC,MAAQL,SAASC,cAAc,OACnCI,MAAMC,UAAUC,IAAI,mBAGdC,eAAiBC,KAAKC,aAAaD,KAAKf,YADjC,aAEPiB,eAAsC,OAArBF,KAAKb,YAAsBa,KAAKC,aAAaD,KAAKb,YAF5D,aAEiF,EACxFgB,WAAa,GAAaC,KAAKC,IAAIN,eAAgBG,gBAEnDI,iQAGkBN,KAAKhB,4BAAmBgB,KAAKO,gEAE/CC,sQAGwBR,KAAKf,2FAI7BwB,WAAsC,OAAzBT,KAAKd,qQAGAc,KAAKd,4BAAmBc,KAAKU,2EAE/C,GACAC,aAAwC,OAAzBX,KAAKd,yNAGZc,KAAKb,2DAEP,UAEZS,MAAMgB,iEAA4DT,2JAExDG,wCACAG,gGAEID,8CACAG,2DAIdf,MAAMiB,uBAAuB,uBAAuB,GAAGC,QACnD,CACI,CAAEC,gBAAiB,UACnB,CAAEA,0BAAoBf,KAAKhB,4BAAmBgB,KAAKO,wBACpD,CAACS,SAAU,MAElBpB,MAAMiB,uBAAuB,uBAAuB,GAAGC,QACnD,CACI,CAAEC,gBAAiB,SACnB,CAAEA,0BAAoBf,KAAKd,4BAAmBc,KAAKU,wBACpD,CAACM,SAAU,MAGXpB,cAxEFZ,gBAAkBA,qBAClBC,YAAcA,iBACdsB,qBAAuB,IAAMP,KAAKhB,qBAClC0B,qBAAiD,KAAzB,IAAMxB,sBAC9BA,gBAAoC,IAAlBA,qBAClBC,YAAcA"}